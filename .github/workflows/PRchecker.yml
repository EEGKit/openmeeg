name: PR Checker

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix

    strategy:
      matrix:
        os: [windows-latest]
        #os: [macos-latest, ubuntu-18.04, ubuntu-20.04]
        #os: [macos-latest, windows-latest, ubuntu-18.04, ubuntu-20.04]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Windows setup
      if: startsWith(matrix.os,'windows')
      run: |
        echo "BLAS=Intel10_64lp_seq" >> $GITHUB_ENV
        C:/Miniconda/condabin/conda.bat update conda
        C:/Miniconda/condabin/conda.bat config --add channels conda-forge
        C:/Miniconda/condabin/conda.bat install --yes -c massich matio-cmake
        C:/Miniconda/condabin/conda.bat install --yes -c intel -c intel mkl-devel
        #C:/Miniconda/condabin/conda.bat install numpy mkl=2021.* libblas=*=*mkl
        #source "C:/Program Files (x86)/IntelSWTools/compilers_and_libraries_2019.5.281/windows/mkl/bin/mklvars.bat"
        #printenv >> $GITHUB_ENV
      shell: bash

    - name: MacOS setuo
      if: startsWith(matrix.os,'macos')
      run: |
        echo "BLAS=OpenBLAS" >> $GITHUB_ENV
        brew update
        brew install hdf5 libmatio boost openblas vtk numpy swig

    - name: Linux setup
      if: startsWith(matrix.os,'ubuntu')
      run: |
        echo "BLAS=OpenBLAS" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install libopenblas-dev liblapacke-dev python3-numpy doxygen graphviz libmatio-dev libvtk7-dev lcov

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBLA_STATIC=ON -DBLA_VENDOR=${{env.BLAS}}
      shell: bash

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
